{"version":3,"sources":["features/header/components/header.tsx","features/home/components/home.tsx","helpers/auth.ts","features/login/components/login.tsx","features/dashboard/components/dashboard.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","className","to","style","cursor","Home","users","username","password","Login","React","useState","loginDetails","setLoginDetails","emptyFieldsList","setEmptyFieldsList","formValid","emptyFields","push","length","handleChange","e","targetId","currentTarget","id","targetValue","value","prevState","onSubmit","preventDefault","user","sha256","userFound","u","JSON","stringify","navigate","color","size","type","includes","placeholder","onChange","Dashboard","App","basepath","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAIMA,EAAS,WACb,OACE,4BAAQC,UAAU,aAChB,yBAAKA,UAAU,8BACb,kBAAC,IAAD,CAAMC,GAAG,WACP,0BAAMC,MAAO,CAAEC,OAAQ,YAAvB,WAEF,kBAAC,IAAD,CAAMF,GAAG,iBACP,4BAAQD,UAAU,2BAAlB,cCPJI,EAAwB,WAC5B,OAAO,yBAAKJ,UAAU,gBAAf,S,sCCDHK,EAAgB,CACpB,CACEC,SAAU,SACVC,SAAU,oEAEZ,CACED,SAAU,MACVC,SAAU,qE,ykBCKd,IAAMC,EAAyB,WAAO,IAAD,EACKC,IAAMC,SAAuB,CACnEJ,SAAU,GACVC,SAAU,KAHuB,mBAC5BI,EAD4B,KACdC,EADc,OAMWH,IAAMC,SAAmB,IANpC,mBAM5BG,EAN4B,KAMXC,EANW,KAwB7BC,EAAY,WAChB,IAAIC,EAAc,GAWlB,OAVKL,EAAaL,UAChBU,EAAYC,KAAK,YAGdN,EAAaJ,UAChBS,EAAYC,KAAK,YAGnBH,EAAmBE,KAEfA,EAAYE,OAAS,IAOrBC,EAAe,SAACC,GACpB,IAAMC,EAAWD,EAAEE,cAAcC,GAC3BC,EAAcJ,EAAEE,cAAcG,MAChCJ,GACFT,GAAgB,SAAAc,GAAS,YACpBA,EADoB,eAEtBL,EAAWG,QAKlB,OACE,yBAAKxB,UAAU,sBACb,0BAAMA,UAAU,YAAY2B,SAhDX,SAACP,GAEpB,GADAA,EAAEQ,iBACEb,IAAa,CACf,IAAMc,EAAI,KAAQlB,EAAR,CAAsBJ,SAAUuB,IAAOnB,EAAaJ,YAC1DwB,GAAY,EAFD,uBAGf,YAAgB1B,EAAhB,+CAAuB,CAAC,IAAb2B,EAAY,QACjBC,KAAKC,UAAUF,KAAOC,KAAKC,UAAUL,KACvCE,GAAY,IALD,kFAQXA,GACFI,YAAS,iBAsCT,0BAAMnC,UAAU,SAAhB,UACA,0BAAMA,UAAU,kBACba,EAAgBK,OAAS,GAAK,+BAEjC,yBAAKlB,UAAU,sBACb,kBAAC,IAAD,CAAMA,UAAU,OAAOoC,MAAM,UAAUC,KAAM,KAC7C,2BACEd,GAAG,WACHe,KAAK,OACLtC,UAAWa,EAAgB0B,SAAS,YAAc,kBAAoB,UACtEC,YAAY,WACZf,MAAOd,EAAaL,SACpBmC,SAAUtB,KAGd,yBAAKnB,UAAU,sBACb,kBAAC,IAAD,CAAMA,UAAU,OAAOoC,MAAM,UAAUC,KAAM,KAC7C,2BACEd,GAAG,WACHe,KAAK,WACLtC,UAAWa,EAAgB0B,SAAS,YAAc,kBAAoB,UACtEC,YAAY,WACZf,MAAOd,EAAaJ,SACpBkC,SAAUtB,KAGd,yBAAKnB,UAAU,mBACb,4BAAQsC,KAAK,SAAStC,UAAU,eAAhC,cChGJ0C,EAA6B,WACjC,OAAO,yBAAK1C,UAAU,0BAAf,cCeM2C,EAbO,WACpB,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAQ4C,SAAS,WACf,kBAAC,EAAD,CAAMC,KAAK,MACX,kBAAC,EAAD,CAAOA,KAAK,UACZ,kBAAC,EAAD,CAAWA,KAAK,iBCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.268fe335.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/header.scss\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <header className=\"AppHeader\">\r\n      <div className=\"HeaderContent WidthContent\">\r\n        <Link to=\"/Matics\">\r\n          <span style={{ cursor: \"pointer\" }}>Matics</span>\r\n        </Link>\r\n        <Link to=\"/Matics/login\">\r\n          <button className=\"Btn Transparent Primary\">Log In</button>\r\n        </Link>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport { Header };\r\n","import React from \"react\";\r\nimport { RouteComponentProps } from \"@reach/router\";\r\n\r\ntype Props = RouteComponentProps;\r\n\r\nconst Home: React.FC<Props> = () => {\r\n  return <div className=\"WidthContent\">Home</div>;\r\n};\r\n\r\nexport { Home };\r\n","type User = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nconst users: User[] = [\r\n  {\r\n    username: \"Safiye\",\r\n    password: \"93c58fd44c8e57a9c07c2705b62667c6fcaae6ee8a6b62ae77bff052ad650840\" // Ah-HaHa\r\n  },\r\n  {\r\n    username: \"Naz\",\r\n    password: \"b28f6c253f56082a4f8182fd18f6f715dfd530d5ca727ee9bc6a967ea28ab849\" // Gravity!\r\n  }\r\n];\r\n\r\nexport { users };\r\n","import React from \"react\";\r\nimport { RouteComponentProps, navigate } from \"@reach/router\";\r\nimport \"../styles/login.scss\";\r\nimport sha256 from \"sha256\";\r\nimport { users } from \"helpers/auth\";\r\n\r\n// Icons\r\nimport { User } from \"react-feather\";\r\nimport { Lock } from \"react-feather\";\r\n\r\ntype Props = RouteComponentProps;\r\n\r\ntype LoginDetails = {\r\n  username: string;\r\n  password: string;\r\n};\r\n\r\nconst Login: React.FC<Props> = () => {\r\n  const [loginDetails, setLoginDetails] = React.useState<LoginDetails>({\r\n    username: \"\",\r\n    password: \"\"\r\n  });\r\n\r\n  const [emptyFieldsList, setEmptyFieldsList] = React.useState<string[]>([]);\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    if (formValid()) {\r\n      const user = { ...loginDetails, password: sha256(loginDetails.password) };\r\n      let userFound = false;\r\n      for (const u of users) {\r\n        if (JSON.stringify(u) === JSON.stringify(user)) {\r\n          userFound = true;\r\n        }\r\n      }\r\n      if (userFound) {\r\n        navigate(\"/dashboard\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const formValid = () => {\r\n    let emptyFields = [];\r\n    if (!loginDetails.username) {\r\n      emptyFields.push(\"username\");\r\n    }\r\n\r\n    if (!loginDetails.password) {\r\n      emptyFields.push(\"password\");\r\n    }\r\n\r\n    setEmptyFieldsList(emptyFields);\r\n\r\n    if (emptyFields.length > 0) {\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  };\r\n\r\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const targetId = e.currentTarget.id;\r\n    const targetValue = e.currentTarget.value;\r\n    if (targetId) {\r\n      setLoginDetails(prevState => ({\r\n        ...prevState,\r\n        [targetId]: targetValue\r\n      }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Login WidthContent\">\r\n      <form className=\"LoginForm\" onSubmit={handleSubmit}>\r\n        <span className=\"Title\">Log In</span>\r\n        <span className=\"WarningMessage\">\r\n          {emptyFieldsList.length > 0 && \"Hey! Fill in the details...\"}\r\n        </span>\r\n        <div className=\"FormField WithIcon\">\r\n          <User className=\"Icon\" color=\"#2c3539\" size={20} />\r\n          <input\r\n            id=\"username\"\r\n            type=\"text\"\r\n            className={emptyFieldsList.includes(\"username\") ? \"EditBox Warning\" : \"EditBox\"}\r\n            placeholder=\"Username\"\r\n            value={loginDetails.username}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"FormField WithIcon\">\r\n          <Lock className=\"Icon\" color=\"#2c3539\" size={20} />\r\n          <input\r\n            id=\"password\"\r\n            type=\"password\"\r\n            className={emptyFieldsList.includes(\"password\") ? \"EditBox Warning\" : \"EditBox\"}\r\n            placeholder=\"Password\"\r\n            value={loginDetails.password}\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"ButtonContainer\">\r\n          <button type=\"submit\" className=\"Btn Primary\">\r\n            Log In\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Login };\r\n","import React from \"react\";\r\nimport { RouteComponentProps } from \"@reach/router\";\r\n\r\ntype Props = RouteComponentProps;\r\n\r\nconst Dashboard: React.FC<Props> = () => {\r\n  return <div className=\"Dashboard WidthContent\">Dashboard</div>;\r\n};\r\n\r\nexport { Dashboard };\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport { Header } from \"./features/header/components/header\";\nimport { Router } from \"@reach/router\";\nimport { Home } from \"./features/home/components/home\";\nimport { Login } from \"./features/login/components/login\";\nimport { Dashboard } from \"./features/dashboard/components/dashboard\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Router basepath=\"/Matics\">\n        <Home path=\"/\" />\n        <Login path=\"login\" />\n        <Dashboard path=\"dashboard\" />\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}